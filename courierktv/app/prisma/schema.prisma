
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/courierktv/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Courier specific fields
  cityId        String?
  telegramId    String?   @unique
  telegramUsername String?
  isActive      Boolean   @default(true)
  
  // Relations
  city          City?     @relation(fields: [cityId], references: [id])
  accounts      Account[]
  sessions      Session[]
  shifts        Shift[]
  receipts      Receipt[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model City {
  id        String   @id @default(cuid())
  name      String   @unique
  region    String
  createdAt DateTime @default(now())
  
  users     User[]
  zones     Zone[]
  
  @@map("cities")
}

model Zone {
  id          String   @id @default(cuid())
  name        String
  color       String   // hex color code
  rate        Float    // earnings rate for this zone
  cityId      String
  coordinates Json     // GeoJSON polygon coordinates
  createdAt   DateTime @default(now())
  
  city        City     @relation(fields: [cityId], references: [id])
  receipts    Receipt[]
  
  @@map("zones")
}

model Shift {
  id          String    @id @default(cuid())
  userId      String
  startTime   DateTime  @default(now())
  endTime     DateTime?
  isActive    Boolean   @default(true)
  totalEarnings Float   @default(0)
  totalOrders Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id])
  receipts    Receipt[]
  
  @@map("shifts")
}

model Receipt {
  id                String    @id @default(cuid())
  userId            String
  shiftId           String?
  zoneId            String?
  
  // Image data
  imageUrl          String?
  originalFileName  String?
  
  // OCR extracted data
  restaurant        String?
  orderDate         DateTime?
  orderTime         String?
  
  // Address data
  fullAddress       String
  street            String?
  houseNumber       String?
  building          String?
  entrance          String?
  floor             String?
  apartment         String?
  
  // Contact info
  phoneNumber       String?
  additionalNumber  String?   // for extensions like +79610062477,44660
  
  // Payment info
  totalAmount       Float
  paymentMethod     String    // "cash", "card", "transfer", "terminal"
  
  // Processing info
  status            String    @default("processed") // "processing", "processed", "error"
  hasHandwrittenSum Boolean   @default(false)
  isEdited          Boolean   @default(false)
  errorMessage      String?
  
  // Earnings calculation
  zoneRate          Float?
  earnings          Float?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id])
  shift             Shift?    @relation(fields: [shiftId], references: [id])
  zone              Zone?     @relation(fields: [zoneId], references: [id])
  
  @@map("receipts")
}

model TelegramSession {
  id          String   @id @default(cuid())
  telegramId  String   @unique
  userId      String?
  sessionData Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("telegram_sessions")
}

model Settings {
  id                String   @id @default(cuid())
  key               String   @unique
  value             String
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("settings")
}
