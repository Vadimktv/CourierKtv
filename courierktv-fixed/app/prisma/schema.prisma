generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/courierktv-fixed/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  cityId        String?
  city          City?     @relation(fields: [cityId], references: [id])
  accounts      Account[]
  sessions      Session[]
  shifts        Shift[]
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model City {
  id        String   @id @default(cuid())
  name      String   @unique
  users     User[]
  zones     Zone[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Zone {
  id        String   @id @default(cuid())
  name      String
  color     String
  rate      Int      // Заработок в рублях
  cityId    String
  city      City     @relation(fields: [cityId], references: [id])
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cityId, name])
}

model Shift {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  startTime DateTime
  endTime   DateTime?
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id             String      @id @default(cuid())
  userId         String
  user           User        @relation(fields: [userId], references: [id])
  shiftId        String?
  shift          Shift?      @relation(fields: [shiftId], references: [id])
  zoneId         String?
  zone           Zone?       @relation(fields: [zoneId], references: [id])
  address        String
  phone          String?
  amount         Float
  paymentMethod  PaymentMethod
  receiptImage   String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
  TERMINAL
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
