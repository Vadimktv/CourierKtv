
import { promises as fs } from 'fs';
import path from 'path';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function processReceiptImage(imagePath: string): Promise<any> {
  try {
    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∞: ${imagePath}`);
    
    // Read image file
    const imageBuffer = await fs.readFile(imagePath);
    const base64String = imageBuffer.toString('base64');
    const mimeType = 'image/jpeg';
    const dataUri = `data:${mimeType};base64,${base64String}`;

    // Call LLM API to extract data
    const aiResponse = await fetch('https://apps.abacus.ai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.ABACUSAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-4.1-mini',
        messages: [
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —á–µ–∫ –∏ –∏–∑–≤–ª–µ–∫–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
                {
                  "restaurant": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞/–∑–∞–≤–µ–¥–µ–Ω–∏—è",
                  "orderDate": "–¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD",
                  "orderTime": "–≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞",
                  "fullAddress": "–ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
                  "street": "—É–ª–∏—Ü–∞",
                  "houseNumber": "–Ω–æ–º–µ—Ä –¥–æ–º–∞",
                  "building": "–∫–æ—Ä–ø—É—Å/—Å—Ç—Ä–æ–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)",
                  "entrance": "–ø–æ–¥—ä–µ–∑–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)",
                  "floor": "—ç—Ç–∞–∂ (–µ—Å–ª–∏ –µ—Å—Ç—å)", 
                  "apartment": "–∫–≤–∞—Ä—Ç–∏—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)",
                  "phoneNumber": "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞",
                  "totalAmount": —Å—É–º–º–∞_–∫_–æ–ø–ª–∞—Ç–µ_—á–∏—Å–ª–æ–º,
                  "paymentMethod": "cash" –∏–ª–∏ "card"
                }
                
                –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –Ω–∞ —á–µ–∫–µ. –ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π null –¥–ª—è —Å—Ç—Ä–æ–∫ –∏ 0 –¥–ª—è —á–∏—Å–µ–ª. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`
              },
              {
                type: 'image_url',
                image_url: { url: dataUri }
              }
            ]
          }
        ],
        response_format: { type: "json_object" }
      })
    });

    if (!aiResponse.ok) {
      throw new Error(`AI API Error: ${aiResponse.status}`);
    }

    const aiResult = await aiResponse.json();
    const content = aiResult.choices?.[0]?.message?.content;
    
    if (!content) {
      throw new Error('–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ AI');
    }
    
    // Clean up and parse JSON
    const cleanedContent = content
      .replace(/```json\n?/g, '')
      .replace(/```\n?/g, '')
      .trim();
    
    const extractedData = JSON.parse(cleanedContent);
    
    console.log(`–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${extractedData.restaurant} - ${extractedData.totalAmount}‚ÇΩ`);
    
    return extractedData;
    
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${imagePath}:`, error);
    return null;
  }
}

async function seedDatabase() {
  try {
    console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // Clear existing data
    await prisma.processingHistory.deleteMany();
    await prisma.order.deleteMany();
    console.log('–û—á–∏—Å—Ç–∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ');

    // Get sample receipt files
    const sampleReceiptsDir = path.join(process.cwd(), 'public', 'sample-receipts');
    const files = await fs.readdir(sampleReceiptsDir);
    const imageFiles = files.filter(file => file.match(/\.(jpeg|jpg|png)$/i));
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ–∫–æ–≤`);

    let successCount = 0;
    let errorCount = 0;

    // Process each image
    for (const file of imageFiles) {
      const imagePath = path.join(sampleReceiptsDir, file);
      const startTime = Date.now();
      
      try {
        const extractedData = await processReceiptImage(imagePath);
        
        if (extractedData && extractedData.restaurant && extractedData.phoneNumber && extractedData.fullAddress) {
          // Save to database
          const order = await prisma.order.create({
            data: {
              originalFileName: file,
              restaurant: extractedData.restaurant || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
              orderDate: extractedData.orderDate ? new Date(extractedData.orderDate + 'T00:00:00') : null,
              orderTime: extractedData.orderTime || null,
              fullAddress: extractedData.fullAddress,
              street: extractedData.street || null,
              houseNumber: extractedData.houseNumber || null,
              building: extractedData.building || null,
              entrance: extractedData.entrance || null,
              floor: extractedData.floor || null,
              apartment: extractedData.apartment || null,
              phoneNumber: extractedData.phoneNumber,
              totalAmount: parseFloat(extractedData.totalAmount) || 0,
              paymentMethod: extractedData.paymentMethod === 'cash' ? 'cash' : 'card',
              status: 'processed',
              extractedData: extractedData
            }
          });

          // Log success to processing history
          await prisma.processingHistory.create({
            data: {
              fileName: file,
              status: 'success',
              processingTimeMs: Date.now() - startTime,
              orderId: order.id
            }
          });

          successCount++;
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${file}`);
          
          // Small delay to avoid overwhelming the API
          await new Promise(resolve => setTimeout(resolve, 1000));
          
        } else {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${file}:`, error);
        
        // Log error to processing history
        await prisma.processingHistory.create({
          data: {
            fileName: file,
            status: 'error',
            errorMessage: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            processingTimeMs: Date.now() - startTime
          }
        });
        
        errorCount++;
      }
    }

    console.log('\nüéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount} —á–µ–∫–æ–≤`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount} —á–µ–∫–æ–≤`);
    
    // Display summary statistics
    const totalOrders = await prisma.order.count();
    const totalAmount = await prisma.order.aggregate({
      _sum: { totalAmount: true }
    });
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`- –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}`);
    console.log(`- –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount._sum.totalAmount?.toLocaleString('ru-RU')}‚ÇΩ`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Run the seed function
seedDatabase()
  .catch((error) => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
